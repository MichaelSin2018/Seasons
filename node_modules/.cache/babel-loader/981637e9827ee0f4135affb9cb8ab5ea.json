{"ast":null,"code":"import _slicedToArray from \"/home/sin/Udemy/Seasons/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/sin/Udemy/Seasons/src/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport ReactDom from 'react-dom';\nimport SeasonDisplay from './SeasonDisplay';\nimport Spinner from './Spinner';\n\nvar App = function App() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      lat = _useState2[0],\n      setLat = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      errorMessage = _useState4[0],\n      setErrorMessage = _useState4[1];\n\n  useEffect(function () {\n    window.navigator.geolocation.getCurrentPosition(function (position) {\n      return setLat(position.coords.latitude);\n    }, function (err) {\n      return setErrorMessage(err.message);\n    });\n  }, []);\n  var content;\n\n  if (errorMessage) {\n    content = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, \"Error: \", errorMessage);\n  } else if (lat) {\n    content = React.createElement(SeasonDisplay, {\n      lat: lat,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    });\n  } else {\n    content = React.createElement(Spinner, {\n      message: \"Pleae accept location request\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(\"div\", {\n    className: \"border red\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, content);\n};\n\nReactDom.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 31\n  },\n  __self: this\n}), document.querySelector('#root')); // class App extends React.Component {\n// //   constructor(props) {\n// //     super(props);\n// //     this.state = { lat: null, errorMessage: '' };\n// //   }\n//   state = { lat:null, errorMessage: ''};\n//   componentDidMount() {\n//     window.navigator.geolocation.getCurrentPosition(\n//         position => this.setState({ lat: position.coords.latitude }),\n//         err => this.setState({ errorMessage: err.message })\n//     )  \n//   }\n//   componentDidUpdate() {\n//     console.log('My component was just updated - it rerendered!');\n//   }\n//   renderContent() {\n//     if (this.state.errorMessage && !this.state.lat) {\n//         return <div>Error: {this.state.errorMessage}</div>\n//     };\n//     if (!this.state.errorMessage && this.state.lat) {\n//         return <SeasonDisplay lat={this.state.lat} />\n//     };\n//     return <Spinner message=\"Pleae accept location request\"/>;\n//   }\n//   //React says we have to define render!!\n//   render() {\n//     return (\n//         <div className=\"border red\">\n//           {this.renderContent()}\n//         </div>\n//     )\n//   }\n// };","map":{"version":3,"sources":["/home/sin/Udemy/Seasons/src/index.js"],"names":["React","useState","useEffect","ReactDom","SeasonDisplay","Spinner","App","lat","setLat","errorMessage","setErrorMessage","window","navigator","geolocation","getCurrentPosition","position","coords","latitude","err","message","content","render","document","querySelector"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,IAAMC,GAAG,GAAG,SAANA,GAAM,GAAM;AAAA,kBACML,QAAQ,CAAC,IAAD,CADd;AAAA;AAAA,MACTM,GADS;AAAA,MACJC,MADI;;AAAA,mBAEwBP,QAAQ,CAAC,EAAD,CAFhC;AAAA;AAAA,MAETQ,YAFS;AAAA,MAEKC,eAFL;;AAIhBR,EAAAA,SAAS,CAAC,YAAM;AACdS,IAAAA,MAAM,CAACC,SAAP,CAAiBC,WAAjB,CAA6BC,kBAA7B,CACE,UAAAC,QAAQ;AAAA,aAAIP,MAAM,CAACO,QAAQ,CAACC,MAAT,CAAgBC,QAAjB,CAAV;AAAA,KADV,EAEE,UAAAC,GAAG;AAAA,aAAIR,eAAe,CAACQ,GAAG,CAACC,OAAL,CAAnB;AAAA,KAFL;AAID,GALQ,EAKN,EALM,CAAT;AAOA,MAAIC,OAAJ;;AACA,MAAIX,YAAJ,EAAkB;AAChBW,IAAAA,OAAO,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAaX,YAAb,CAAV;AACD,GAFD,MAEO,IAAIF,GAAJ,EAAS;AACda,IAAAA,OAAO,GAAG,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAEb,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAV;AACD,GAFM,MAEA;AACLa,IAAAA,OAAO,GAAG,oBAAC,OAAD;AAAS,MAAA,OAAO,EAAC,+BAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAV;AACD;;AAED,SAAO;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6BA,OAA7B,CAAP;AACD,CArBD;;AAwBAjB,QAAQ,CAACkB,MAAT,CACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EACWC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CADX,E,CAIA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState, useEffect} from 'react';\nimport ReactDom from 'react-dom';\nimport SeasonDisplay from './SeasonDisplay';\nimport Spinner from './Spinner';\n\nconst App = () => {\n  const [lat, setLat] = useState(null);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    window.navigator.geolocation.getCurrentPosition(\n      position => setLat(position.coords.latitude ),\n      err => setErrorMessage(err.message )\n    );    \n  }, []);\n\n  let content;\n  if (errorMessage) {\n    content = <div>Error: {errorMessage}</div>;\n  } else if (lat) {\n    content = <SeasonDisplay lat={lat} />;\n  } else {\n    content = <Spinner message=\"Pleae accept location request\"/>; \n  }\n\n  return <div className=\"border red\">{content}</div>\n};\n\n\nReactDom.render(\n  <App />, document.querySelector('#root')\n);\n\n// class App extends React.Component {\n// //   constructor(props) {\n// //     super(props);\n// //     this.state = { lat: null, errorMessage: '' };\n// //   }\n  \n//   state = { lat:null, errorMessage: ''};\n  \n//   componentDidMount() {\n//     window.navigator.geolocation.getCurrentPosition(\n//         position => this.setState({ lat: position.coords.latitude }),\n//         err => this.setState({ errorMessage: err.message })\n//     )  \n//   }\n  \n//   componentDidUpdate() {\n//     console.log('My component was just updated - it rerendered!');\n//   }\n\n//   renderContent() {\n//     if (this.state.errorMessage && !this.state.lat) {\n//         return <div>Error: {this.state.errorMessage}</div>\n//     };\n\n//     if (!this.state.errorMessage && this.state.lat) {\n//         return <SeasonDisplay lat={this.state.lat} />\n//     };\n\n//     return <Spinner message=\"Pleae accept location request\"/>;\n//   }\n    \n//   //React says we have to define render!!\n//   render() {\n//     return (\n//         <div className=\"border red\">\n//           {this.renderContent()}\n//         </div>\n//     )\n//   }\n// }; \n"]},"metadata":{},"sourceType":"module"}